18/10/66
//Type of API

// Create Backend API
-Node -> convert JS to lang computer know
-Nest -> framework for use typeScript to create Backend
-install nestjs
-create project
-controller component -> create API
-create module, controller
    -in controller -use @Decorator
        -create object data (Interface)
    -use cli auto execute `nest start --watch`
    -when get api with URI -> we just specific path to @Controller('path') -> 'https://localhost:port/path' ** (not necessary to add Route)
-create service -> inject service to controller
-create parameter url (str) -> in controller @Get(':id')
    -@Param() id: string -> for tell this arg from parameter url
-create query parameter: '?name=Apple'
    -method(@Query('name') productName ?: string)
    -use predicate -> know as a function that return boolean
-add path url -> main.ts ->  app.setGlobalPrefix('path')

//Angular and Nest handle with proxy
-CROS
-Angular -> use HttpClientModule
-inject to component
-use HttpClientModule -> use url, observable.subscribe()
-handle CORS (different origin path -> (protocal://domain:port)) with proxy
    -use angular proxy -> create backend with url same client path -> use proxy for request API (not breaking the rule cause proxy is backend not frontend that use web browser) 
    -but proxy can use only dev mode***
-create type for object API

// fetch API with HttpClientModule
-import to module
-API service - GET, POST, PUT, DELETE, PATCH

// Windows PowerShell, Command Promp
-powershell is cmd that improve
-prob execution policies -> fix by re-strict
    ->use admin: Set-ExecutionPolicy Unrestricted***
-install PowerShell on mac

19/10/66
// Nest.JS Step-by-Step
/install
    -nodejs
    -nestjs -> framework
    -vscode -> extension: vscode-icons
-use powershell
-run project
/create module and controller
-structure project
    -module - folder that contain controllers
    -controller - 1 controller = 1 route
        -each route have decorator(@) for behavior route @Get, @Put, etc.
    -create new module, controller
/Http Post with Http Body
    -use postman
    -use @Post()
    -urlencoded = % encoding -> use for safe when transmit data with URL ex (&) -> %26
/Http Delete with Param
    -@Delete("/:id") -> it's just a name for specify working (but we should use for delete job)
        -use with @Param("id"): id:string
            -echo = return something back to server
/Service
    -service = static class that contain function -> can share to another components
        -@Injectable = can inject to another components
    -inject to constructor()
/Entity
    -create variable for receive data, we create class type -> call Entity
        -entity -> use with database
        -interface -> use with data object
/Add Data into Array
    -create unique id
        -add lib 'uuid' -> use for generate number id
        -import uuid -> and use to property id
/Delete and Error Exception
    -create function in service -> find exist data id
    -create error exception = error handler
    -.filter(), .find()

//JWT is?? (Json Web Token)
-HMAC Secret??
-RSA PRIVATE KEY??
-RSA PUBLIC KEY??
-PAYLOAD??
-server to server
    -JWT components
        -header (header)
            -type: JTW, algorithm: HS256 = HMAC SECRET, base64 (use HMAC encode to base64 but it's not a secret just convert to string)
        -payload (payload)
            -user_id: 1, , base64 (use payload encode to base64 but it's not a secret just convert to string)
        -signature (body)
            -is generate from algorithm HS256
        -JWT = (header).(payload).(body) = token
    -payload set expired for change token
        -careful about sync time between device that communicate
-client to server
    -JWT components
        -header (header)
            -type: JTW, algorithm: RS256 = RSA PRIVATE, base64 (use RSA encode to base64 but it's not a secret just convert to string)
        -payload (payload)
            -user_id: 1, , base64 (use payload encode to base64 but it's not a secret just convert to string)
        -signature (body)
            -is generate from algorithm RS256
        -JWT use RSA generate from server = (header).(payload).(body) = token
            -sent JWT to client -> client check by use RSA PUBLIC for decrypt token that come from server (is valid or not)

// Authentication and Authorization
-authentication = confirm identity
    -login username, pass, bio(hand, eye)
    -level
        -single factor auth
        -two-factor auth
        -multi-factor auth
-authorization = role that this user can access level (admin, user)
    -role-base access control, JWT, SAML, OpenID Auth, OAuth

// json-web-token -> use for keep non-sensitive data
-authentication, authorization
-server based authentication
    -session id
    -authentication request
        -credential(username/pass) -> session id -> cookie
    -subsequence request
        -cookie -> session id -> request
-JWT = token that contain header.payload.signature
    -header -> SH256, RSA
    -payload -> user id, role, email
    -signature -> digital sign
-JWT use for keep user id and roles**
-authentication to server -> server send jwt back to localStorage -> request attech jwt to server for decrypt (server pick from payload to check)
-localStorage and cookies (XSS, XSRF)??

// JWT (json web token)
-stateful, stateless
-session
    -session id -> cookies
-cluster
-stateful -> app use session
-stateless -> app use token
-token -> custom, jwt
-native mobile -> not working with web (not use cookies) so not suitable with stateful (that use session)
-jwt structure
    -header
    -payload
    -sign(payload -> header.alg, SECRET_KEY)
-digital signature
-jwt work -> use signature for verify token
    -login -> server generate token -> sent back to client, keep token in localStorage, cookies -> client request + token -> server verify (payload+header.alg+signature, SECRET_KEY)

// Public Key Infrastructure
-sender(A)
    -data + symmetric key(A) -> symmetric = data encryption
    -symmetric key(A) -> public key(B) = symmetric key encryption
    -send: data encryption + symmetric key encryption
-symmetric key = what key encryption, that key decryption
-receiver(B)
    -receive: data encryption + symmetric key encryption
    -private key(B) -> decrypt symmetric key encryption = symmetric key(A)
    -symmetric key(A) -> decrypt data encryption = data

// Digital Signature Methodology
-sender(A)
    -data -> hash algorithm = hash value(A)
    -hash value(A) -> private key(A) = signature
    -send: signature + data
-receiver(B)
    -receive: signature + data
    -signature -> public key(A) = hash value(B)
    -data -> hash algorithm = hash value(A)
    -check hash value(A) and hash value(B) = 100% -> accept

// Public Key, Private Key
-key, encrypt, decrypt
-secret key, keypair = 2Keys
-secret key
    -symmetric encryption = what is key encrypt, that key decrypt
    -can generate by set, random
    -algorithm ex AES
-Keypair, 2Keys
    -asymmetric encryption = one key encrypt(public key), one key decrypt(private key)
    -base64 format -> ---BEGIN---, ---END---
    -public key and private key generate by math, can't random
    -each keys have relationship
    -each keys can valid each other
    -algorithm ex RSA, ECC
-use case -> secret key encrypt data -> use 2Keys encrypt secret key
-digital signature
    -use encrypt to 'sign', use decrypt to 'verify'
    -use case -> use key to 'sign/verify token' for authentication
        -verify token in 2Keys we can use public key that we sign token from private key
        -we can't use same key to sign and verify**
-specific way to encrypt
    -fast: secret key
    -share: keypair (public key, private key)
-RSA (Rivest, Shamir, Adleman)
    -is algorithm for public key, private key -> asymmetric encryption
-public key, private key use for
    -digital certification -> Https
    -digital signature
    -working SSH
    -JWT for sign, verify token with RSA algorithm
    -blockchain
    -credential firebase from google
-how to create Public Key, Private Key
    -OpenSSL, Java Keytool, SSH Keygen, Programming
-Key format
    -public key -> X.509
    -private key -> PKCS#8
-Example code java
-Base64 format
-file .pem, .key, .pub
-test decrypt/encrypt public key, private key
    

https://www.jittagornp.me/blog/what-is-public-key-private-key/?series=pki
https://www.jittagornp.me/blog/what-is-x509-certificate/?series=pki
https://www.jittagornp.me/blog/what-is-https/
https://rath.asia/blog/2017/02/19/https-and-related-technology-explained/