18/10/66
//Type of API

// Create Backend API
-Node -> convert JS to lang computer know
-Nest -> framework for use typeScript to create Backend
-install nestjs
-create project
-controller component -> create API
-create module, controller
    -in controller -use @Decorator
        -create object data (Interface)
    -use cli auto execute `nest start --watch`
    -when get api with URI -> we just specific path to @Controller('path') -> 'https://localhost:port/path' ** (not necessary to add Route)
-create service -> inject service to controller
-create parameter url (str) -> in controller @Get(':id')
    -@Param() id: string -> for tell this arg from parameter url
-create query parameter: '?name=Apple'
    -method(@Query('name') productName ?: string)
    -use predicate -> know as a function that return boolean
-add path url -> main.ts ->  app.setGlobalPrefix('path')

//Angular and Nest handle with proxy
-CROS
-Angular -> use HttpClientModule
-inject to component
-use HttpClientModule -> use url, observable.subscribe()
-handle CORS (different origin path -> (protocal://domain:port)) with proxy
    -use angular proxy -> create backend with url same client path -> use proxy for request API (not breaking the rule cause proxy is backend not frontend that use web browser) 
    -but proxy can use only dev mode***
-create type for object API

// fetch API with HttpClientModule
-import to module
-API service - GET, POST, PUT, DELETE, PATCH

// Windows PowerShell, Command Promp
-powershell is cmd that improve
-prob execution policies -> fix by re-strict
    ->use admin: Set-ExecutionPolicy Unrestricted***
-install PowerShell on mac

19/10/66
// Nest.JS Step-by-Step
/install
    -nodejs
    -nestjs -> framework
    -vscode -> extension: vscode-icons
-use powershell
-run project
/create module and controller
-structure project
    -module - folder that contain controllers
    -controller - 1 controller = 1 route
        -each route have decorator(@) for behavior route @Get, @Put, etc.
    -create new module, controller
/Http Post with Http Body
    -use postman
    -use @Post()
    -urlencoded = % encoding -> use for safe when transmit data with URL ex (&) -> %26
/Http Delete with Param
    -@Delete("/:id") -> it's just a name for specify working (but we should use for delete job)
        -use with @Param("id"): id:string
            -echo = return something back to server
/Service
    -service = static class that contain function -> can share to another components
        -@Injectable = can inject to another components
    -inject to constructor()
/Entity
    -create variable for receive data, we create class type -> call Entity
        -entity -> use with database
        -interface -> use with data object
/Add Data into Array
    -create unique id
        -add lib 'uuid' -> use for generate number id
        -import uuid -> and use to property id
/Delete and Error Exception
    -create function in service -> find exist data id
    -create error exception = error handler
    -.filter(), .find()